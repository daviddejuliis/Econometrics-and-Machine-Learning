# Time Series - ARIMA, VAR, VCEM - with Granger Causality and Prediction
#A few short commands exploring different techniques in Time Series to observe relationships in GDP, CPI and PPI data.


# install packages
library(tseries)
library(urca)
library(vars)

mydata<- read.csv("C:/Users/pc/Downloads/R Files/timeseries_ppi.csv")
attach(mydata)

# Defining variables
Y <- ppi
d.Y <- diff(Y)
t <- yearqrt

# Descriptive statistics and plotting the data
head(timeseries_ppi)

summary(Y)
summary(d.Y)

plot(t,Y)
plot(d.Y)

# Dickey-Fuller test for variable
adf.test(Y, alternative="stationary", k=0)
adf.test(Y, alternative="explosive", k=0)

#summary(lm(dppi ~ lppi, na.action=na.omit))
#summary(lm(dppi ~ lppi + trend, na.action=na.omit))

# Augmented Dickey-Fuller test
adf.test(Y, alternative="stationary")

# DF and ADF tests for differenced variable
adf.test(d.Y, k=0)
adf.test(d.Y)


# ACF and PACF
acf(Y)
pacf(Y)

acf(d.Y)
pacf(d.Y)

# ARIMA(1,0,0) or AR(1)
arima(Y, order = c(1,0,0))

# ARIMA(2,0,0) or AR(2)
arima(Y, order = c(2,0,0))

# ARIMA(0,0,1) or MA(1)
arima(Y, order = c(0,0,1))

# ARIMA(1,0,1) or AR(1) MA(1)
arima(Y, order = c(1,0,1))

# ARIMA on differenced variable 
# ARIMA(1,1,0)
arima(d.Y, order = c(1,0,0))

# ARIMA(0,1,1)
arima(d.Y, order = c(0,0,1))

# ARIMA(1,1,1)
arima(d.Y, order = c(1,0,1))

# ARIMA(1,1,3)
arima(d.Y, order = c(1,0,3))

# ARIMA(2,1,3)
arima(d.Y, order = c(2,0,3))


# ARIMA(1,0,1) forecasting
mydata.arima101 <- arima(Y, order = c(1,0,1))
mydata.pred1 <- predict(mydata.arima101, n.ahead=100)
plot (Y)
lines(mydata.pred1$pred, col="blue")
lines(mydata.pred1$pred+2*mydata.pred1$se, col="red")
lines(mydata.pred1$pred-2*mydata.pred1$se, col="red")

# ARIMA(1,1,1) forecasting
mydata.arima111 <- arima(d.Y, order = c(1,0,1))
mydata.pred1 <- predict(mydata.arima111, n.ahead=100)
plot (d.Y)
lines(mydata.pred1$pred, col="blue")
lines(mydata.pred1$pred+2*mydata.pred1$se, col="red")
lines(mydata.pred1$pred-2*mydata.pred1$se, col="red")

# Function to find the best ARIMA order using AIC
find_best_arima <- function(series, max_p, max_d, max_q) {
  best_aic <- Inf
  best_order <- c(0, 0, 0)
  
  for (p in 0:max_p) {
    for (d in 0:max_d) {
      for (q in 0:max_q) {
        current_order <- c(p, d, q)
        tryCatch({
          model <- arima(series, order = current_order)
          aic <- AIC(model)
          if (aic < best_aic) {
            best_aic <- aic
            best_order <- current_order
          }
        }, error = function(e) {})
      }
    }
  }
  
  return(list(order = best_order, aic = best_aic))
}

# Define the maximum values for p, d, q
max_p <- 3
max_d <- 1
max_q <- 3

# Find the best ARIMA order
best_order <- find_best_arima(Y, max_p, max_d, max_q)

# Print the best ARIMA order and corresponding AIC
cat("Best ARIMA Order: p =", best_order$order[1], ", d =", best_order$order[2], ", q =", best_order$order[3], "\n")
cat("AIC:", best_order$aic, "\n")

# ARIMA(3,1,2)
arima(d.Y, order = c(3,0,2))

#Multivariate time series analysis of PPI and GDP

# Convert the data frame to a time series object
myts <- ts(mydata[, c("ppi", "gdp")], frequency = 1)

# Perform Dickey-Fuller test for 'gdp' variable
adf_gdp <- adf.test(mydata$gdp, alternative = "stationary")
cat("Dickey-Fuller test for gdp variable:\n")
print(adf_gdp)

#Difference GDP data
Y2 <- gdp
d.Y2 <- diff(Y2)


# Fit a VAR model with lag order 1 (you can adjust the lag order as needed)
var_model <- VAR(myts, p = 1, type = "none")

# Summary of the VAR model
summary(var_model)


# Create a multivariate time series object
mytsDIFF <- ts(data.frame(diff_ppi = d.Y, diff_gdp = d.Y2), frequency = 1)

# Fit a VECM model with lag order 1 (Adjust the lag order as needed)

vecm_model <- VECM(mytsDIFF, lag = 1, r = 1)

# Summary of the VECM model
summary(vecm_model)

# Function to estimate VECM and return AIC/BIC
estimate_vecm <- function(lag_order, data) {
  vecm_model <- ca.jo(data, ecdet = "const", K = 1, spec = "transitory", dumvar = NULL, lag = lag_order)
  aic <- AIC(vecm_model)
  bic <- BIC(vecm_model)
  return(list(aic = aic, bic = bic))
}

# Try different lag orders and store AIC/BIC values
max_lag <- 10  # Set your maximum lag order
aic_values <- numeric(max_lag)
bic_values <- numeric(max_lag)

for (lag_order in 1:max_lag) {
  model_info <- estimate_vecm(lag_order, diff_data)
  aic_values[lag_order] <- model_info$aic
  bic_values[lag_order] <- model_info$bic
}

# Find the lag order with the minimum AIC and BIC
best_aic_lag <- which.min(aic_values)
best_bic_lag <- which.min(bic_values)

cat("Best lag order based on AIC:", best_aic_lag, "\n")
cat("Best lag order based on BIC:", best_bic_lag, "\n")

# Perform Granger Causality test
#The null hypothesis of the Granger causality test states that lagged values of X do not contain useful information for predicting Y, and vice versa. In mathematical terms, if X Granger-causesY, the past values of X (lagged by k periods) should have a statistically significant effect on predicting Y
#In practical terms, it means that the past values of one variable help in predicting the other variable's future values.
granger_test <- cajofilter(vecm_model, type = "granger", K = 1)

# Print Granger causality test results
print(granger_test)

best_lag <- NULL
best_aic <- Inf

for (lag_order in 1:max_lag) {
  # Create lagged variables for the Granger causality test
  lagged_data <- cbind(lagged_X[, 1:lag_order], lagged_Y[, 1:lag_order])
  
  # Fit VAR model
  var_model <- VAR(lagged_data)
  
  # Perform Granger causality test and calculate AIC/BIC
  granger_test <- grangertest(var_model, p = lag_order)
  aic <- AIC(var_model)
  bic <- BIC(var_model)
  
  # Update best lag order if the current model has lower AIC/BIC
  if (aic < best_aic) {
    best_lag <- lag_order
    best_aic <- aic
  }
}

print(paste("Best Lag Order (AIC):", best_lag))
print(paste("Best Lag Order (BIC):", best_lag))

# PREDICTION
# Number of steps to forecast
n_steps <- 10 

# Forecast using the VECM model
vecm_forecast <- predict(vecm_model, n.ahead = n_steps)

# Extracting the forecasted values
forecasted_diff_ppi <- vecm_forecast$fcst$d.Y
forecasted_diff_gdp <- vecm_forecast$fcst$d.Y2

# Print the forecasted values
cat("Forecasted diff_ppi:", forecasted_diff_ppi, "\n")
cat("Forecasted diff_gdp:", forecasted_diff_gdp, "\n")
  



